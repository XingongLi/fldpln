{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to fldpln","text":"<p>Flood inundation modeling and mapping using the FLDPLN model</p> <ul> <li>Free software: MIT License</li> <li>Documentation: https://xingongli.github.io/fldpln</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>TODO</li> </ul>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v001-date","title":"v0.0.1 - Date","text":"<p>Improvement:</p> <ul> <li>TBD</li> </ul> <p>New Features:</p> <ul> <li>TBD</li> </ul>"},{"location":"common/","title":"common module","text":"<p>The common module contains common variables, functions and classes used by the other modules.</p>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/xingongli/fldpln/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with <code>bug</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with <code>enhancement</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>fldpln could always use more documentation, whether as part of the official fldpln docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/xingongli/fldpln/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up fldpln for local development.</p> <ol> <li> <p>Fork the fldpln repo on GitHub.</p> </li> <li> <p>Clone your fork locally:</p> <pre><code>$ git clone git@github.com:your_name_here/fldpln.git\n</code></pre> </li> <li> <p>Install your local copy into a virtualenv. Assuming you have     virtualenvwrapper installed, this is how you set up your fork for     local development:</p> <pre><code>$ mkvirtualenv fldpln\n$ cd fldpln/\n$ python setup.py develop\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass flake8     and the tests, including testing other Python versions with tox:</p> <pre><code>$ flake8 fldpln tests\n$ python setup.py test or pytest\n$ tox\n</code></pre> <p>To get flake8 and tox, just pip install them into your virtualenv.</p> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated.     Put your new functionality into a function with a docstring, and add     the feature to the list in README.rst.</li> <li>The pull request should work for Python 3.8 and later, and     for PyPy. Check https://github.com/xingongli/fldpln/pull_requests and make sure that the tests pass for all     supported Python versions.</li> </ol>"},{"location":"faq/","title":"FAQ","text":""},{"location":"gauge/","title":"gauge module","text":"<p>Module for handling USGS and AHPS gauge data for flood inundation mapping.</p>"},{"location":"gauge/#fldpln.gauge.GetAhpsGaugeDatumElevation","title":"<code>GetAhpsGaugeDatumElevation(ahpsGaugeUrl)</code>","text":"<p>Retrieve gauge stage datum elevation and vertical datum name from AHPS web HTML page.</p> <p>Parameters:</p> Name Type Description Default <code>ahpsGaugeUrl</code> <code>str</code> <p>URL of AHPS gauge web page.</p> required <p>Returns:</p> Type Description <code>tuple</code> <p>vertical datum name (str), gauge stage datum elevation (float).</p>"},{"location":"gauge/#fldpln.gauge.GetAhpsGaugeForecast","title":"<code>GetAhpsGaugeForecast(scratchFolder, fcstLength, gaugeDatumFile)</code>","text":"<p>Get AHPS gauge forecast for a specified number of future days.</p> <p>Parameters:</p> Name Type Description Default <code>scratchFolder</code> <code>str</code> <p>scratch folder to store downloaded files.</p> required <code>fcstLength</code> <code>int</code> <p>forecast length in days between 0 and 14 days. 0 is current observation.</p> required <code>gaugeDatumFile</code> <code>str</code> <p>file name of gauge datum information.</p> required <p>Returns:</p> Type Description <code>data frame</code> <p>a data frame of AHPS gauge forecast.</p>"},{"location":"gauge/#fldpln.gauge.GetAhpsGaugeHistoricalFloodStages","title":"<code>GetAhpsGaugeHistoricalFloodStages(scratchFolder, gaugeDatumFile)</code>","text":"<p>Get AHPS gauge historical flood stages: 'Action','Flood','Moderate','Major'.</p> <p>Parameters:</p> Name Type Description Default <code>scratchFolder</code> <code>str</code> <p>scratch folder to store downloaded files.</p> required <code>gaugeDatumFile</code> <code>str</code> <p>file name of gauge datum information.</p> required <p>Returns:</p> Type Description <code>data frame</code> <p>a data frame of AHPS gauge historical flood stages.</p>"},{"location":"gauge/#fldpln.gauge.GetAhpsGaugeStageFromWebService","title":"<code>GetAhpsGaugeStageFromWebService(ahpsIds, fcstDays=0, histFloodType=None)</code>","text":"<p>Get AHPS gauge stage from web service.</p> <p>Parameters:</p> Name Type Description Default <code>ahpsIds</code> <code>list</code> <p>a list of AHPS gauge IDs.</p> required <code>fcstDays</code> <code>int</code> <p>forecasted time in 0 to 14 days. 0 is current obersevation. default to 0.</p> <code>0</code> <code>histFloodType</code> <code>str</code> <p>historical flood types of Major, Moderate, Flood, Action. default to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>data frame</code> <p>a data frame of AHPS gauge stage.</p>"},{"location":"gauge/#fldpln.gauge.GetAhpsGauges","title":"<code>GetAhpsGauges(geobox, epsg=32614)</code>","text":"<p>Get AHPS gauges within a box and project them to a specified coordinate system.</p> <p>Parameters:</p> Name Type Description Default <code>geobox</code> <code>list</code> <p>a list of geographic box elements of [minX,minY,maxX,maxY]</p> required <code>epsg</code> <code>int</code> <p>EPSG integer representing the projected coordinate system, default to UTM14 (epsg = 32614) for Kansas.</p> <code>32614</code> <p>Returns:</p> Type Description <code>data frame</code> <p>a data frame of AHPS gauges projected to the specified coordinate system.</p>"},{"location":"gauge/#fldpln.gauge.GetGaugeStageFromAhpsUsgsWebServices","title":"<code>GetGaugeStageFromAhpsUsgsWebServices(gaugeFile, whichStage='Nowcast')</code>","text":"<p>Read gauge stage from AHPS or USGS web services.</p> <p>Parameters:</p> Name Type Description Default <code>gaugeFile</code> <code>str</code> <p>file name of gauge information.</p> required <code>whichStage</code> <code>str</code> <p>Nowcast, Forecast, Hindcast, and historical stages Action, Flood, Moderate, Major. Default to 'Nowcast'.</p> <code>'Nowcast'</code> <p>Returns:</p> Type Description <code>data frame</code> <p>a data frame of gauge stage with the fields of stationid, x, y, stage_elevation, stage_time, status.</p>"},{"location":"gauge/#fldpln.gauge.GetUsgsGaugeInfo","title":"<code>GetUsgsGaugeInfo(ids)</code>","text":"<p>Get USGS gauge information with a list of gauge IDs.</p> <p>Parameters:</p> Name Type Description Default <code>ids</code> <code>list</code> <p>a list of USGS gauge IDs.</p> required <p>Returns:</p> Type Description <code>data frame</code> <p>a data frame of USGS gauge information.</p>"},{"location":"gauge/#fldpln.gauge.GetUsgsGaugeStageFromWebService","title":"<code>GetUsgsGaugeStageFromWebService(usgsIds, startDate='Now', endDate='MostRecent')</code>","text":"<p>Get USGS gauge stage from web service. USGS Instantaneous Values Service URL: https://waterservices.usgs.gov/rest/IV-Test-Tool.html</p> <p>Parameters:</p> Name Type Description Default <code>usgsIds</code> <code>list</code> <p>a list of USGS IDs.</p> required <code>startDate</code> <code>str</code> <p>start date (in format of '2018-09-02') of the query. Default to 'Now'. When it's \"Now\", endDate must be the days (an integer) from now. </p> <code>'Now'</code> <code>endDate</code> <code>str</code> <p>end date (in format of '2018-09-02') of the query. Default to 'MostRecent'. 'MostRecent' can only be used with \"Now\" as startDate.</p> <code>'MostRecent'</code> <p>Returns:</p> Type Description <code>data frame</code> <p>a data frame of USGS gauge stage.</p>"},{"location":"gauge/#fldpln.gauge.GetUsgsGauges","title":"<code>GetUsgsGauges(geobox, epsg=32614)</code>","text":"<p>Get USGS gauges within a box and project them to a specified coordinate system.</p> <p>Parameters:</p> Name Type Description Default <code>geobox</code> <code>list</code> <p>a list of geographic box elements of [minX,minY,maxX,maxY].</p> required <code>epsg</code> <code>int</code> <p>EPSG integer representing the projected coordinate system, default to UTM14 (epsg = 32614) for Kansas. </p> <code>32614</code> <p>Returns:</p> Type Description <code>data frame</code> <p>a geo data frame of USGS gauges projected to the specified coordinate system.</p>"},{"location":"gauge/#fldpln.gauge.MergeUsgsAhpsGauges","title":"<code>MergeUsgsAhpsGauges(usgsGauges, ahpsGauges, nearDist=350)</code>","text":"<p>Merge USGS and AHPS gauges based on the nearest neighbor that is within a specified distance.</p> <p>Parameters:</p> Name Type Description Default <code>usgsGauges</code> <code>data frame</code> <p>USGS gauges data frame.</p> required <code>ahpsGauges</code> <code>data frame</code> <p>AHPS gauges data frame.</p> required <code>nearDist</code> <code>float</code> <p>distance threshold for finding the nearest gauge, default to 350 meters.</p> <code>350</code> <p>Returns:</p> Type Description <code>data frame</code> <p>a data frame of merged USGS and AHPS gauges.</p>"},{"location":"gauge/#fldpln.gauge.NGVD29ToNAVD88OrthoHeightAdjustment","title":"<code>NGVD29ToNAVD88OrthoHeightAdjustment(lat, lon, inDatum, outDatum, inVertDatum='NGVD29', outVertDatum='NAVD88', orthoHt=0.0)</code>","text":"<p>Calculate vertical datum shift between NGVD29 and NAVD88 using NGS web service.  NGS Latitude-longitude-height Service: https://www.ngs.noaa.gov/web_services/ncat/lat-long-height-service.shtml</p> <p>Parameters:</p> Name Type Description Default <code>lat</code> <code>float</code> <p>latitude of the gauge.</p> required <code>lon</code> <code>float</code> <p>longitude of the gauge.</p> required <code>inDatum</code> <code>str</code> <p>input datum name.</p> required <code>outDatum</code> <code>str</code> <p>output datum name.</p> required <code>inVertDatum</code> <code>str</code> <p>input vertical datum name, default to NGVD29.</p> <code>'NGVD29'</code> <code>outVertDatum</code> <code>str</code> <p>output vertical datum name, default to NAVD88.</p> <code>'NAVD88'</code> <code>orthoHt</code> <code>float</code> <p>orthometric height, default to 0.0.</p> <code>0.0</code> <p>Returns:</p> Type Description <code>float</code> <p>vertical datum shift from NGVD29 to NAVD88.</p>"},{"location":"gauge/#fldpln.gauge.PrepareAhpsGaugeDatum","title":"<code>PrepareAhpsGaugeDatum(scratchFolder, libFolder, prjFileName, datumFile)</code>","text":"<p>Prepare AHPS gauge datum.</p> <p>Parameters:</p> Name Type Description Default <code>scratchFolder</code> <code>str</code> <p>scratch folder to store downloaded files.</p> required <code>libFolder</code> <code>str</code> <p>library folder to store files.</p> required <code>prjFileName</code> <code>str</code> <p>file name of projection information.</p> required <code>datumFile</code> <code>str</code> <p>file name of gauge datum information.</p> required <p>Returns:</p> Type Description <code>data frame</code> <p>a data frame of AHPS gauges.</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install fldpln, run this command in your terminal:</p> <pre><code>pip install fldpln\n</code></pre> <p>This is the preferred method to install fldpln, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>To install fldpln from sources, run this command in your terminal:</p> <pre><code>pip install git+https://github.com/xingongli/fldpln\n</code></pre>"},{"location":"mapping/","title":"mapping module","text":"<p>Module for mapping tile-based library.</p>"},{"location":"mapping/#fldpln.mapping.CreateFolders","title":"<code>CreateFolders(outFolder, scratchFolderName='scratch', outMapFolderName='maps', removeExist=True)</code>","text":"<p>Create folders for storing temporary files and output maps.</p> <p>Parameters:</p> Name Type Description Default <code>outFolder</code> <code>str</code> <p>output folder</p> required <code>scratchFolderName</code> <code>str</code> <p>name of the folder for storing temporary files</p> <code>'scratch'</code> <code>outMapFolderName</code> <code>str</code> <p>name of the folder for storing output maps, default is 'maps'</p> <code>'maps'</code> <code>removeExist</code> <code>str</code> <p>bool whether to remove existing folders, default is True</p> <code>True</code>"},{"location":"mapping/#fldpln.mapping.DownloadTiledLibrary","title":"<code>DownloadTiledLibrary(libUrl, libName, localLibFolder)</code>","text":"<p>Download and unzip tiled libraries.</p> <p>Parameters:</p> Name Type Description Default <code>libUrl</code> <code>str</code> <p>the url of the library</p> required <code>libName</code> <code>str</code> <p>the name of the library</p> required <code>localLibFolder</code> <code>str</code> <p>the folder where the library will be saved</p> required <p>Returns:</p> Type Description <code>None</code> <p>no return.</p>"},{"location":"mapping/#fldpln.mapping.EstimateFspDofFromGauge","title":"<code>EstimateFspDofFromGauge(libFolder, libName, gaugeFspDf, minGaugeDof=0.0328084, weightingType='V')</code>","text":"<p>Estimate/interpolate FSP DOF (Depth of Flow, i.e., FSP stage) from observed gauge DOFs using  distance-(horizontal) or elevation-based (vertical) linear interpolation.</p> <p>Parameters:</p> Name Type Description Default <code>libFolder</code> <code>str</code> <p>the folder where the libraries are located</p> required <code>libName</code> <code>str</code> <p>the name of the library that the gauges will be snapped to</p> required <code>gaugeFspDf</code> <code>data frame</code> <p>a data frame of gauge FSPs (i.e., FSPs to which gauges are snapped). It should have at least 4 columns ['stage_elevation','lib_name','FspX','FspY'].</p> required <code>minGaugeDof</code> <code>float</code> <p>min DOF a gauge should have, by default is 1 cm = 0.0328083989501312 foot</p> <code>0.0328084</code> <code>weightingType</code> <code>str</code> <p>'V' for vertical distance-based or 'H' for horizontal distance-based, default is 'V'</p> <code>'V'</code> <p>Returns:</p> Type Description <code>data frame</code> <p>a data frame with interpolated FSP DOFs.</p>"},{"location":"mapping/#fldpln.mapping.EstimateFspDofFromGaugeBlob","title":"<code>EstimateFspDofFromGaugeBlob(libBlobSerClient, libName, gaugeDf, gaugeElevField, minGaugeDof=0.0328084)</code>","text":"<p>Estimate FSP Depth of Flow (DoF), i.e., FSP stage from gauges on Microsoft Planetary Computer using Azure Blob Storage.</p> <p>Parameters:</p> Name Type Description Default <code>libBlobSerClient</code> <code>BlobServiceClient</code> <p>a BlobServiceClient object</p> required <code>libName</code> <code>str</code> <p>the name of the library that the gauges will be snapped to</p> required <code>gaugeDf</code> <code>data frame</code> <p>a data frame of gauges. It should have at least 4 columns ['FspX','FspY','FspFilledElev','Dist']</p> required <code>gaugeElevField</code> <code>str</code> <p>the field in gaugeDf that stores gauge's water surface elevation</p> required <code>minGaugeDof</code> <code>float</code> <p>min DOF a gauge should have, default is 1 cm = 0.0328083989501312 foot. Negative DOF may occur as incorrect gauge datum</p> <code>0.0328084</code> <p>Returns:</p> Type Description <code>data frame</code> <p>a data frame with interpolated FSP DOFs.</p>"},{"location":"mapping/#fldpln.mapping.FindDownstreamSegments","title":"<code>FindDownstreamSegments(seg, volume, segInfoDf, dist, volumeDistributionType='SFA', distanceType='Topology')</code>","text":"<p>Find downstream segments of a given segment and assign a flow volume in a segment network defined by the segment info table/DataFrame</p> <p>Parameters:</p> Name Type Description Default <code>seg</code> <p>segment ID of the outlet/start segment</p> required <code>volume</code> <p>volume of the segment</p> required <code>segInfoDf</code> <p>segment info DataFrame with columns ['SegId', 'DsSegId'] which stores segment network connectivity</p> required <code>dist</code> <p>distance (number of segments) to look downstream</p> required <code>volumeDistributionType</code> <p>types ('SFA'--same for all, 'WTA'--winner takes all, 'EQU'--equal distribution, or 'FAC'--flow accumulation based) of volume distribution to upstream segments at a confluence, default is 'WTA'.</p> <code>'SFA'</code> <code>distanceType</code> <p>types ('Topology'--(0, inf), 'Network', 'Euclidean') of distance to use, default is 'Topology'. This is not used in this function but can be used in the future for different distance calculations.</p> <code>'Topology'</code> <p>Returns:</p> Type Description <p>a list of downstream segment IDs</p>"},{"location":"mapping/#fldpln.mapping.FindUpstreamSegments","title":"<code>FindUpstreamSegments(seg, volume, segInfoDf, dist, volumeDistributionType='SFA', distanceType='Topology')</code>","text":"<p>Find upstream segments of a given segment and assign a flow volume in a segment network defined by the segment info table/DataFrame</p> <p>Parameters:</p> Name Type Description Default <code>seg</code> <p>segment ID of the outlet/start segment</p> required <code>volume</code> <p>volume of the segment</p> required <code>segInfoDf</code> <p>segment info DataFrame with columns ['SegId', 'DsSegId'] which stores segment network connectivity</p> required <code>dist</code> <p>distance (number of segments) to look upstream</p> required <code>volumeDistributionType</code> <p>types ('SFA'--same for all, 'WTA'--winner takes all, 'EQU'--equal distribution, or 'FAC'--flow accumulation based) of volume distribution to upstream segments at a confluence, default is 'WTA'.</p> <code>'SFA'</code> <code>distanceType</code> <p>types ('Topology'--(0, inf), 'Network', 'Euclidean') of distance to use, default is 'Topology'. This is not used in this function but can be used in the future for different distance calculations.</p> <code>'Topology'</code> <p>Returns:</p> Type Description <p>a list of upstream segment IDs        </p>"},{"location":"mapping/#fldpln.mapping.GenerateReachNetworkTree","title":"<code>GenerateReachNetworkTree(seg, segInfoDf, reachId=0, parent=None)</code>","text":"<p>Generate a reach network tree from an outlet segment ID. The reach that contains the outlet/start segment is the root reach of the reach network/tree.     This function also assign reach type as one of the following:             TC: terminal (i.e., head-water) reach that flows into a confluence,             TO: terminal reach that flows into network outlet,              CC: confluence reach that flows into a confluence,             CO: confluence reach that flows into network outlet.</p> <p>Parameters:</p> Name Type Description Default <code>seg</code> <p>segment ID of the outlet/start segment</p> required <code>segInfoDf</code> <p>segment info DataFrame with columns ['SegId', 'DsSegId'] which stores segment network connectivity</p> required <code>reachId</code> <p>start reach ID, default is 0</p> <code>0</code> <code>parent</code> <p>parent reach of the current reach, None for the root reach</p> <code>None</code>"},{"location":"mapping/#fldpln.mapping.GetTileTifs","title":"<code>GetTileTifs(tifFiles)</code>","text":"<p>Get tile Geotif files</p> <p>Parameters:</p> Name Type Description Default <code>tifFiles</code> <code>list</code> <p>a list of tile Geotif files</p> required <p>Returns:</p> Type Description <code>list</code> <p>a list of tile Geotif files</p>"},{"location":"mapping/#fldpln.mapping.InterpBetweenTwoGauges","title":"<code>InterpBetweenTwoGauges(fx, fe, gx1, ge1, gy1, gx2, ge2, gy2, weightingType='V')</code>","text":"<p>Interpolate FSP DOF (Depth of Flow, i.e., FSP stage) based on FSP's elevation (fe) or distance (fx) between two gauges.</p> <p>Parameters:</p> Name Type Description Default <code>fx</code> <code>float or vector of float</code> <p>FSP's distance from downstream outlet.</p> required <code>fe</code> <code>float or vector of float</code> <p>FSP's elevation. Can be a vector</p> required <code>gx1</code> <code>float</code> <p>gauge1's distance from downstream outlet</p> required <code>ge1</code> <code>float</code> <p>gauge1's elevation</p> required <code>gy1</code> <code>float</code> <p>gauge1's DOF</p> required <code>gx2</code> <code>float</code> <p>gauge2's distance from downstream outlet</p> required <code>ge2</code> <code>float</code> <p>gauge2's elevation</p> required <code>gy2</code> <code>float</code> <p>gauge2's DOF</p> required <code>weightingType</code> <code>str</code> <p>'V' for vertical distance-based or 'H' for horizontal distance-based, default is 'V'</p> <code>'V'</code> <p>Returns:</p> Type Description <code>float or vector of float</code> <p>interpolated DOF at fx</p>"},{"location":"mapping/#fldpln.mapping.InterpDofWithGauges","title":"<code>InterpDofWithGauges(fx, fe, gx, ge, gy, weightingType='V')</code>","text":"<p>Interpolate FSP DOF (Depth of Flow, i.e., FSP stage) using the DOFs observed at a list of gauges.</p> <p>Parameters:</p> Name Type Description Default <code>fx</code> <code>vector of float</code> <p>FSP's distance from downstream outlet.</p> required <code>fe</code> <code>vector of float</code> <p>FSP's elevation.</p> required <code>gx</code> <code>vector of float</code> <p>gauge's distance from downstream outlet.</p> required <code>ge</code> <code>vector of float</code> <p>gauge's elevation.</p> required <code>gy</code> <code>vector of float</code> <p>gauge's DOF.</p> required <code>weightingType</code> <code>str</code> <p>'V' for vertical distance-based or 'H' for horizontal distance-based, default is 'V'</p> <code>'V'</code> <p>Returns:</p> Type Description <code>vector of float</code> <p>interpolated DOF at fx    </p>"},{"location":"mapping/#fldpln.mapping.InterpolateCategoryFspDofFromGaugeThroughVolume","title":"<code>InterpolateCategoryFspDofFromGaugeThroughVolume(libFolder, libName, gaugeFspDf, upDist=1, dsDist=2)</code>","text":"<p>Interpolate library segment volumes from gauged FSPs. libFolder: folder where the library is stored libName: name of the library gaugeFspDf: DataFrame with gauged FSPs including columns ['lib_name', 'SegId', 'FspX', 'FspY', 'FilledElev', 'DsDist', 'Dof']</p>"},{"location":"mapping/#fldpln.mapping.InterpolateFspDofFromGauge","title":"<code>InterpolateFspDofFromGauge(libFolder, libName, gaugeFspDf, minGaugeDof=0.0328084, weightingType='V')</code>","text":"<p>Interpolate FSP DOF (Depth of Flow, i.e., FSP stage) from observed gauge DOFs using distance-(horizontal) or  elevation-based (vertical) linear interpolation. Different from EstimateFspDofFromGauge(),  this function assumes gauge FSPs already have their DOF calculated!</p> <p>Parameters:</p> Name Type Description Default <code>libFolder</code> <code>str</code> <p>the folder where the libraries are located</p> required <code>libName</code> <code>str</code> <p>the name of the library that the gauges will be snapped to</p> required <code>gaugeFspDf</code> <code>data frame</code> <p>a data frame of gauge FSPs (i.e., FSPs to which gauges are snapped). It should have at least 4 columns ['lib_name','FspX','FspY','Dof'].</p> required <code>minGaugeDof</code> <code>float</code> <p>min DOF a gauge should have, by default is 1 cm = 0.0328083989501312 foot</p> <code>0.0328084</code> <code>weightingType</code> <code>str</code> <p>'V' for vertical distance-based or 'H' for horizontal distance-based, default is 'V'</p> <code>'V'</code> <p>Returns:</p> Type Description <code>data frame</code> <p>a data frame with interpolated FSP DOFs.</p>"},{"location":"mapping/#fldpln.mapping.InterpolateFspDofFromGaugeThroughVolume","title":"<code>InterpolateFspDofFromGaugeThroughVolume(libFolder, libName, gaugeFspDf, netType='Filtered', dsPropSegNum=2)</code>","text":"<p>Interpolate library segment volumes from gauged FSPs. libFolder: folder where the library is stored libName: name of the library gaugeFspDf: DataFrame with gauged FSPs including columns ['lib_name', 'SegId', 'FspX', 'FspY', 'FilledElev', 'DsDist', 'Dof'] netType: type of reach network, either 'Filtered' or 'Full' dsPropSegNum: number of segments to propagate the volume downstream from the most downstream gauged segment for TO &amp; CO reaches, default to 2.</p>"},{"location":"mapping/#fldpln.mapping.InterpolateReachFspDof","title":"<code>InterpolateReachFspDof(reach, libPath, gaugeFspDf, segInfo, libFspDf, dsPropSegNum=2, outVarName='fsp_dof')</code>","text":"<p>Interpolate reach FSP DOF from gauged FSPs through segment volumes.</p> <p>Parameters:</p> Name Type Description Default <code>reach</code> <p>a reach node with segment IDs and gauged segments</p> required <code>libPath</code> <p>path to the folder where segment's DOF-volume files are stored</p> required <code>gaugeFspDf</code> <p>DataFrame with gauged FSPs including columns ['lib_name', 'SegId', 'FspX', 'FspY', 'FilledElev', 'DsDist', 'Dof']</p> required <code>segsInfo</code> <p>DataFrame with all segment information including columns [SegId, MidDsDist]</p> required <code>libFspDf</code> <p>DataFrame with library FSPs including columns ['lib_name', 'SegId', 'FspX', 'FspY', 'FilledElev', 'DsDist']</p> required <code>dsPropSegNum</code> <p>number of segments to propagate the volume downstream from the most downstream gauged segment for TO &amp; CO reaches, default is 2</p> <code>2</code> <code>outVarName</code> <p>name of the output variable to store interpolated segment volumes, default is</p> <code>'fsp_dof'</code>"},{"location":"mapping/#fldpln.mapping.MapFloodDepthWithTiles","title":"<code>MapFloodDepthWithTiles(libFolder, libName, fileFormat, outMapFolder, fspDof='MinDtf', aoiExtent=None)</code>","text":"<p>Map flood depth with tiled library based on FSP DOF and AOI extent</p> <p>Parameters:</p> Name Type Description Default <code>libFolder</code> <code>str</code> <p>the folder where the libraries are stored</p> required <code>libName</code> <code>str</code> <p>the name of the library</p> required <code>fileFormat</code> <code>str</code> <p>the file format of the tile, 'snappy' or 'mat'</p> required <code>outMapFolder</code> <code>str</code> <p>the folder where the mapped tiles will be saved</p> required <code>fspDof</code> <code>str, float, or data frame</code> <p>the FSP DOF for mapping flood depth. default is 'MinDtf'.  If it's a string, it can be 'MinDtf', 'NumOfFsps', or 'Depression'.  If it's a float, it's a constant stage for all the FSPs.  If it's a data frame, it's a data frame of FSPs with DOF.</p> <code>'MinDtf'</code> <code>aoiExtent</code> <code>list</code> <p>the extent of the area of interest [minX,maxX,minY,maxY]. default is None</p> <code>None</code> <p>Returns:</p> Type Description <code>list</code> <p>a list of mapped tile names as GeoTif files.</p>"},{"location":"mapping/#fldpln.mapping.MapFloodDepthWithTilesAsDag","title":"<code>MapFloodDepthWithTilesAsDag(libFolder, libName, fileFormat, outMapFolder, fspDof='MinDtf', aoiExtent=None)</code>","text":"<p>Map flood depth with tiled library based on FSP DOF and AOI extent as a Directed Acyclic Graph (DAG)</p> <p>Parameters:</p> Name Type Description Default <code>libFolder</code> <code>str</code> <p>the folder where the libraries are stored</p> required <code>libName</code> <code>str</code> <p>the name of the library</p> required <code>fileFormat</code> <code>str</code> <p>the file format of the tile, 'snappy' or 'mat'</p> required <code>outMapFolder</code> <code>str</code> <p>the folder where the mapped tiles will be saved</p> required <code>fspDof</code> <code>str, float, or data frame</code> <p>the FSP DOF for mapping flood depth. default is 'MinDtf'.  If it's a string, it can be 'MinDtf', 'NumOfFsps', or 'Depression'.  If it's a float, it's a constant stage for all the FSPs.  If it's a data frame, it's a data frame of FSPs with DOF.</p> <code>'MinDtf'</code> <code>aoiExtent</code> <code>list</code> <p>the extent of the area of interest [minX,maxX,minY,maxY]. default is None</p> <code>None</code> <p>Returns:</p> Type Description <code>tuple</code> <p>a Directed Acyclic Graph (DAG) and the root node name.</p>"},{"location":"mapping/#fldpln.mapping.MapFloodDepthWithTilesBlob","title":"<code>MapFloodDepthWithTilesBlob(libBlobSerClient, libName, fileFormat, mapContainerClient, fspDof='MinDtf', aoiExtent=None)</code>","text":"<p>Map flood depth with tiled library based on FSP DOF and AOI extent on Microsoft Planetary Computer using data in Azure Blob Storage.</p> <p>Parameters:</p> Name Type Description Default <code>libBlobSerClient</code> <code>BlobServiceClient</code> <p>a BlobServiceClient object</p> required <code>libName</code> <code>str</code> <p>the name of the library</p> required <code>fileFormat</code> <code>str</code> <p>the file format of the tile, 'snappy' or 'mat'</p> required <code>mapContainerClient</code> <code>ContainerClient</code> <p>a ContainerClient object for the container to store the mapped tiles</p> required <code>fspDof</code> <code>str, float, or data frame</code> <p>the FSP DOF for mapping flood depth. default is 'MinDtf'.  If it's a string, it can be 'MinDtf', 'NumOfFsps', or 'Depression'.  If it's a float, it's a constant stage for all the FSPs.  If it's a data frame, it's a data frame of FSPs with DOF.</p> <code>'MinDtf'</code> <code>aoiExtent</code> <code>list</code> <p>the extent of the area of interest [minX,maxX,minY,maxY]. default is None</p> <code>None</code> <p>Returns:</p> Type Description <code>list</code> <p>a list of mapped tile names as GeoTif files</p>"},{"location":"mapping/#fldpln.mapping.MapFloodDepthWithTilesBlobAsDag","title":"<code>MapFloodDepthWithTilesBlobAsDag(libBlobSerClient, libName, fileFormat, mapContainerClient, fspDof='MinDtf', aoiExtent=None)</code>","text":"<p>Map flood depth with tiled library based on FSP DOF and AOI extent on Microsoft Planetary Computer using data in Azure Blob Storage  as a Directed Acyclic Graph (DAG).</p> <p>Parameters:</p> Name Type Description Default <code>libBlobSerClient</code> <code>BlobServiceClient</code> <p>a BlobServiceClient object</p> required <code>libName</code> <code>str</code> <p>the name of the library</p> required <code>fileFormat</code> <code>str</code> <p>the file format of the tile, 'snappy' or 'mat'</p> required <code>mapContainerClient</code> <code>ContainerClient</code> <p>a ContainerClient object for the container to store the mapped tiles</p> required <code>fspDof</code> <code>str, float, or data frame</code> <p>the FSP DOF for mapping flood depth. default is 'MinDtf'.  If it's a string, it can be 'MinDtf', 'NumOfFsps', or 'Depression'.  If it's a float, it's a constant stage for all the FSPs.  If it's a data frame, it's a data frame of FSPs with DOF.</p> <code>'MinDtf'</code> <code>aoiExtent</code> <code>list</code> <p>the extent of the area of interest [minX,maxX,minY,maxY]. default is None</p> <code>None</code> <p>Returns:</p> Type Description <code>tuple</code> <p>a Directed Acyclic Graph (DAG) and the root node name</p>"},{"location":"mapping/#fldpln.mapping.MapOneTile","title":"<code>MapOneTile(libFolder, libName, tid, fppExtent, cellSize, libSr, fileFormat, outMapFolder, fspDof='MinDtf', aoiExtent=None)</code>","text":"<p>Map one tile as a GeoTif file based on FSP DOF and AOI extent</p> <p>Parameters:</p> Name Type Description Default <code>libFolder</code> <code>str</code> <p>the folder where the libraries are stored</p> required <code>libName</code> <code>str</code> <p>the name of the library</p> required <code>tid</code> <code>int</code> <p>the tile ID</p> required <code>fppExtent</code> <code>list</code> <p>the extent of the FPPs in the tile [minX,maxX,minY,maxY]</p> required <code>cellSize</code> <code>float</code> <p>the cell size of the raster</p> required <code>libSr</code> <code>str</code> <p>the spatial reference of the library</p> required <code>fileFormat</code> <code>str</code> <p>the file format of the tile, 'snappy' or 'mat'</p> required <code>outMapFolder</code> <code>str</code> <p>the folder where the mapped tiles will be saved</p> required <code>fspDof</code> <code>str, float, or data frame</code> <p>the FSP DOF for mapping flood depth. default is 'MinDtf'. If it's a string, it can be 'MinDtf', 'NumOfFsps', or 'Depression'. If it's a float, it's a constant stage for all the FSPs. If it's a data frame, it's a data frame of FSPs with DOF.</p> <code>'MinDtf'</code> <code>aoiExtent</code> <code>list</code> <p>the extent of the area of interest [minX,maxX,minY,maxY]. default is None </p> <code>None</code> <p>Returns:</p> Type Description <code>str</code> <p>the name of the mapped tile as a GeoTif file</p>"},{"location":"mapping/#fldpln.mapping.MapOneTileBlob","title":"<code>MapOneTileBlob(libBlobSerClient, libName, tid, fppExtent, cellSize, libSr, fileFormat, mapContainerClient, fspDof='MinDtf', aoiExtent=None)</code>","text":"<p>Map one tile as a GeoTif file based on FSP DOF and AOI extent on Microsoft Planetary Computer using Azure Blob Storage.</p> <p>Parameters:</p> Name Type Description Default <code>libBlobSerClient</code> <code>BlobServiceClient</code> <p>a BlobServiceClient object</p> required <code>libName</code> <code>str</code> <p>the name of the library</p> required <code>tid</code> <code>int</code> <p>the tile ID</p> required <code>fppExtent</code> <code>list</code> <p>the extent of the FPPs in the tile [minX,maxX,minY,maxY]</p> required <code>cellSize</code> <code>float</code> <p>the cell size of the raster</p> required <code>libSr</code> <code>str</code> <p>the spatial reference of the library</p> required <code>fileFormat</code> <code>str</code> <p>the file format of the tile, 'snappy' or 'mat'</p> required <code>mapContainerClient</code> <code>ContainerClient</code> <p>a ContainerClient object for the container to store the mapped tiles</p> required <code>fspDof</code> <code>str, float, or data frame</code> <p>the FSP DOF for mapping flood depth. default is 'MinDtf'. If it's a string, it can be 'MinDtf', 'NumOfFsps', or 'Depression'. If it's a float, it's a constant stage for all the FSPs. If it's a data frame, it's a data frame of FSPs with DOF.</p> <code>'MinDtf'</code> <code>aoiExtent</code> <code>list</code> <p>the extent of the area of interest [minX,maxX,minY,maxY], default is None</p> <code>None</code> <p>Returns:</p> Type Description <code>str</code> <p>the name of the mapped tile as a GeoTif file</p>"},{"location":"mapping/#fldpln.mapping.MosaicGtifs","title":"<code>MosaicGtifs(outMapFolder, gtifs, mosaicTifName, keepTifs=False)</code>","text":"<p>Mosaic a list of GeoTifs into one GeoTif file using rasterio.merge module. See https://medium.com/spatial-data-science/how-to-mosaic-merge-raster-data-in-python-fb18e44f3c8. This func may cause memory overflow as the merge() first creates the mosaiced array in memory!</p> <p>Parameters:</p> Name Type Description Default <code>outMapFolder</code> <code>str</code> <p>the folder where the mosaiced tif will be saved</p> required <code>gtifs</code> <code>list</code> <p>a list of tile GeoTifs to be mosaiced</p> required <code>mosaicTifName</code> <code>str</code> <p>the name of the mosaiced GeoTif file</p> required <code>keepTifs</code> <code>bool</code> <p>whether to keep the tile GeoTifs, default is False</p> <code>False</code> <p>Returns:</p> Type Description <code>str</code> <p>the name of the mosaiced GeoTif.</p>"},{"location":"mapping/#fldpln.mapping.MosaicGtifsBlob","title":"<code>MosaicGtifsBlob(mapContClient, gtifs, outGtif, keepTifs=False)</code>","text":"<p>Mosaic a list of GeoTifs into one GeoTif file using rasterio.merge module on Microsoft Planetary Computer using data in Azure Blob Storage. See https://medium.com/spatial-data-science/how-to-mosaic-merge-raster-data-in-python-fb18e44f3c8. This func may cause memory overflow as the merge() first creates the mosaiced array in memory!</p> <p>Parameters:</p> Name Type Description Default <code>mapContClient</code> <code>ContainerClient</code> <p>a ContainerClient object for the container to store the mosaiced tif</p> required <code>gtifs</code> <code>list</code> <p>a list of tile GeoTifs to be mosaiced</p> required <code>outGtif</code> <code>str</code> <p>the name of the mosaiced GeoTif file</p> required <code>keepTifs</code> <code>bool</code> <p>whether to keep the tile GeoTifs, default is False</p> <code>False</code> <p>Returns:</p> Type Description <code>None</code> <p>no return.</p>"},{"location":"mapping/#fldpln.mapping.MosaicGtifsUsingVirtualRaster","title":"<code>MosaicGtifsUsingVirtualRaster(gtifs, outGtif)</code>","text":"<p>Mosaic a list of GeoTifs into one GeoTif file using GDAL virtual raster. Easiest way of mosaic very large Gtif. Based on the video at https://www.youtube.com/watch?v=sBBMKbAj8XE</p> <p>Parameters:</p> Name Type Description Default <code>gtifs</code> <code>list</code> <p>a list of tile GeoTifs to be mosaiced</p> required <code>outGtif</code> <code>str</code> <p>the name of the mosaiced GeoTif file</p> required <p>Returns:</p> Type Description <code>None</code> <p>no return</p>"},{"location":"mapping/#fldpln.mapping.NearestPoint","title":"<code>NearestPoint(p1df, x1FieldName, y1FieldName, p2df, x2FieldName, y2FieldName, distFieldName='dist', otherColumns=None)</code>","text":"<p>Join two sets of points by nearest distance. The returned data frame will have, in addition to p1df fields, a new distance field (i.e., distFieldName),  plus other fields (i.e., otherColumns) copied from p2df.</p> <p>Parameters:</p> Name Type Description Default <code>p1df</code> <code>data frame</code> <p>the first set of points as a pandas DataFrame</p> required <code>x1FieldName</code> <code>str</code> <p>the field name of y coordinates in p1df</p> required <code>y1FieldName</code> <code>str</code> <p>the field name of y coordinates in p1df</p> required <code>p2df</code> <code>data frame</code> <p>the second set of points as a pandas DataFrame</p> required <code>x2FieldName</code> <code>str</code> <p>the field name of x coordinates in p2df</p> required <code>y2FieldName</code> <code>str</code> <p>the field name y coordinates in p2df</p> required <code>distFieldName</code> <code>str</code> <p>the name of the distance field in the returned data frame, default is 'dist'</p> <code>'dist'</code> <code>otherColumns</code> <code>list</code> <p>the names of other fields to be copied from p2df to the returned data frame, default is None.</p> <code>None</code>"},{"location":"mapping/#fldpln.mapping.NearestPointInPlace","title":"<code>NearestPointInPlace(p1df, x1FieldName, y1FieldName, p2df, x2FieldName, y2FieldName, distFieldName='dist', otherColumns=None)</code>","text":"<p>Join two sets of points by nearest distance. p1df will have a new distance field (i.e., distFieldName), plus other fields (i.e., otherColumns) copied from p2df. Note that this function changes p1df. This is the only difference between this function and NearestPoint()! This is the only difference between this function and NearestPoint()!</p> <p>Parameters:</p> Name Type Description Default <code>p1df</code> <code>data frame</code> <p>the first set of points as a pandas DataFrame</p> required <code>x1FieldName</code> <code>str</code> <p>the field name of y coordinates in p1df</p> required <code>y1FieldName</code> <code>str</code> <p>the field name of y coordinates in p1df</p> required <code>p2df</code> <code>data frame</code> <p>the second set of points as a pandas DataFrame</p> required <code>x2FieldName</code> <code>str</code> <p>the field name of x coordinates in p2df</p> required <code>y2FieldName</code> <code>str</code> <p>the field name y coordinates in p2df</p> required <code>distFieldName</code> <code>str</code> <p>the name of the distance field in the returned data frame, default is 'dist'</p> <code>'dist'</code> <code>otherColumns</code> <code>list</code> <p>the names of other fields to be copied from p2df to the returned data frame, default is None</p> <code>None</code> <p>Returns:</p> Type Description <code>data frame</code> <p>p1df with the nearest points from p2df.</p>"},{"location":"mapping/#fldpln.mapping.SnapGauges2Fsps","title":"<code>SnapGauges2Fsps(libFolder, libNames, gauges, snapDist=350, gaugeXField='X', gaugeYField='Y', fspColumns=['FspId', 'FspX', 'FspY', 'FilledElev'])</code>","text":"<p>Snap gauges to library FSPs. The function will return a data frame with the nearest FSPs for each gauge in each library.  Note that multiple FSPs from different libraries might be snapped to the same gauge!</p> <p>Parameters:</p> Name Type Description Default <code>libFolder</code> <code>str</code> <p>the folder where the libraries are located</p> required <code>libNames</code> <code>list</code> <p>a list of library names that the gauges will be snapped to</p> required <code>gauges</code> <code>str or data frame</code> <p>a text file or a pandas DF of gauges. It must have the columns of 'X' and 'Y' in FSP's coordinate system</p> required <code>snapDist</code> <code>float</code> <p>the distance to snap gauges to FSPs, default is 350</p> <code>350</code> <code>gaugeXField</code> <code>str</code> <p>the field name of x coordinates in gauges, default is 'X'</p> <code>'X'</code> <code>gaugeYField</code> <code>str</code> <p>the field name of y coordinates in gauges, default is 'Y'</p> <code>'Y'</code> <code>fspColumns</code> <code>list</code> <p>the names of FSP columns to be returned, default is ['FspId','FspX','FspY','FilledElev']</p> <code>['FspId', 'FspX', 'FspY', 'FilledElev']</code> <p>Returns:</p> Type Description <code>data frame</code> <p>a data frame with the nearest FSPs for each gauge in each library.</p>"},{"location":"mapping/#fldpln.mapping.SnapGauges2FspsBlob","title":"<code>SnapGauges2FspsBlob(libBlobSerClient, libName, gaugesDf, snapDist=350, gaugeIdField='GaugeLID', gaugeXField='X', gaugeYField='Y')</code>","text":"<p>Snap gauges to library FSPs on Microsoft Planetary Computer (MPC) using Azure Blob Storage. The function has NOT been checked yet!</p> <p>Parameters:</p> Name Type Description Default <code>libBlobSerClient</code> <code>BlobServiceClient</code> <p>a blob service client</p> required <code>libName</code> <code>str</code> <p>the name of the library that the gauges will be snapped to</p> required <code>gaugesDf</code> <code>data frame</code> <p>a pandas DF of gauges. It must have the columns of 'X' and 'Y' in FSP's coordinate system</p> required <code>snapDist</code> <code>float</code> <p>the distance to snap gauges to FSPs, default is 350</p> <code>350</code> <code>gaugeIdField</code> <code>str</code> <p>the field name of gauge IDs in gauges, default is 'GaugeLID'</p> <code>'GaugeLID'</code> <code>gaugeXField</code> <code>str</code> <p>the field name of x coordinates in gauges, default is 'X'</p> <code>'X'</code> <code>gaugeYField</code> <code>str</code> <p>the field name of y coordinates in gauges, default is 'Y'</p> <code>'Y'</code> <p>Returns:</p> Type Description <code>data frame</code> <p>a data frame with the nearest FSPs for each gauge in the library.</p>"},{"location":"mapping/#fldpln.mapping.SnapGaugesToFsps","title":"<code>SnapGaugesToFsps(libFolder, libName, gauges, snapDist=250, gaugeIdField='GaugeLID', gaugeXField='X', gaugeYField='Y')</code>","text":"<p>Snap gauges to library FSPs. The function will return a data frame with the snapped gauges only.</p> <p>Parameters:</p> Name Type Description Default <code>libFolder</code> <code>str</code> <p>the folder where the libraries are located</p> required <code>libName</code> <code>str</code> <p>the name of the library that the gauges will be snapped to</p> required <code>gauges</code> <code>str or data frame</code> <p>a text file or a pandas data frame of gauges. It must have the columns of 'X' and 'Y' in FSP's coordinate system</p> required <code>snapDist</code> <code>float</code> <p>the distance to snap gauges to FSPs, default is 250</p> <code>250</code> <code>gaugeIdField</code> <code>str</code> <p>the field name of gauge IDs in gauges, default is 'GaugeLID'</p> <code>'GaugeLID'</code> <code>gaugeXField</code> <code>str</code> <p>the field name of x coordinates in gauges, default is 'X'</p> <code>'X'</code> <code>gaugeYField</code> <code>str</code> <p>the field name of y coordinates in gauges, default is 'Y'</p> <code>'Y'</code> <p>Returns:</p> Type Description <code>data frame</code> <p>a data frame with the snapped gauges only.</p>"},{"location":"mapping/#fldpln.mapping.SnapGaugesToFspsBlob","title":"<code>SnapGaugesToFspsBlob(libBlobSerClient, libName, gaugesDf, snapDist=250, gaugeIdField='GaugeLID', gaugeXField='X', gaugeYField='Y')</code>","text":"<p>Snap gauges to library FSPs on Microsoft Planetary Computer (MPC) using Azure Blob Storage. The function is has NOT been checked yet!</p> <p>Parameters:</p> Name Type Description Default <code>libBlobSerClient</code> <code>BlobServiceClient</code> <p>a blob service client</p> required <code>libName</code> <code>str</code> <p>the name of the library that the gauges will be snapped to</p> required <code>gaugesDf</code> <code>data frame</code> <p>a pandas DF of gauges. It must have the columns of 'X' and 'Y' in FSP's coordinate system</p> required <code>snapDist</code> <code>float</code> <p>the distance to snap gauges to FSPs, default is 250</p> <code>250</code> <code>gaugeIdField</code> <code>str</code> <p>the field name of gauge IDs in gauges, default is 'GaugeLID'</p> <code>'GaugeLID'</code> <code>gaugeXField</code> <code>str</code> <p>the field name of x coordinates in gauges, default is 'X'</p> <code>'X'</code> <code>gaugeYField</code> <code>str</code> <p>the field name of y coordinates in gauges, default is 'Y'</p> <code>'Y'</code> <p>Returns:</p> Type Description <code>data frame</code> <p>a data frame with the snapped gauges only.</p>"},{"location":"mapping/#fldpln.mapping.TileFspFppRelations2Array","title":"<code>TileFspFppRelations2Array(fspFppRels, fppExtent, cellSize, fspDof='MinDtf', aoiExtent=None, noData=-9999)</code>","text":"<p>Turn a dataframe of FSP-FPP relations to a 2D array of flood depth.  The minimum bounding extent of the FPPs in the relations is always used when create the map for the tile!</p> <p>Parameters:</p> Name Type Description Default <code>fspFppRels</code> <code>data frame</code> <p>a dataframe of FSP-FPP relations which have the columns of [\"FspId\", \"FppCol\", \"FppRow\", \"Dtf\", \"FilledDepth\"] from a tile</p> required <code>fppExtent</code> <code>list</code> <p>a list of [minX, maxX, minY, maxY], FPP's external extent of the tile and is also used to locate FPP's columns and rows in map coordinate</p> required <code>cellSize</code> <code>float</code> <p>the cell size of the raster</p> required <code>fspDof</code> <code>str, float, or data frame</code> <p>the FSP DOF for mapping flood depth. default is 'MinDtf'. If it's a string, it can be 'MinDtf', 'NumOfFsps', or 'Depression'. If it's a float, it's a constant stage for all the FSPs. If it's a data frame, it's a data frame of FSPs with DOF.</p> <code>'MinDtf'</code> <code>aoiExtent</code> <code>list</code> <p>the extent of the area of interest [minX,maxX,minY,maxY]. default is None</p> <code>None</code> <code>noData</code> <code>int</code> <p>the no data value, default is -9999</p> <code>-9999</code> <p>Returns:</p> Type Description <code>tuple</code> <p>a tuple of the np array as the map, the no data value, the minimum X value, and the minimum Y value</p>"},{"location":"mapping/#fldpln.mapping.Tiles2Map","title":"<code>Tiles2Map(libFolder, libName, fspDof='MinDtf', aoiExtent=None)</code>","text":"<p>Decide the tiles need to be mapped for the library.</p> <p>Parameters:</p> Name Type Description Default <code>libFolder</code> <code>str</code> <p>the folder where the libraries are stored</p> required <code>libName</code> <code>str</code> <p>the name of the library</p> required <code>fspDof</code> <code>str, float, or data frame</code> <p>the FSP DOF for mapping flood depth. default is 'MinDtf'. If it's a string, it can be 'MinDtf', 'NumOfFsps', or 'Depression'. If it's a float, it's a constant stage for all the FSPs. If it's a data frame, it's a data frame of FSPs with DOF.</p> <code>'MinDtf'</code> <code>aoiExtent</code> <code>list</code> <p>the extent of the area of interest [minX,maxX,minY,maxY]. default is None.</p> <code>None</code> <p>Returns:</p> Type Description <code>tuple</code> <p>a list of tile IDs, a list of tile FPP extents</p>"},{"location":"mapping/#fldpln.mapping.Tiles2MapBlob","title":"<code>Tiles2MapBlob(libBlobSerClient, libName, fspDof='MinDtf', aoiExtent=None)</code>","text":"<p>Decide the tiles need to be mapped for the library on Microsoft Planetary Computer using Azure Blob Storage.</p> <p>Parameters:</p> Name Type Description Default <code>libBlobSerClient</code> <code>BlobServiceClient</code> <p>a BlobServiceClient object</p> required <code>libName</code> <code>str</code> <p>the name of the library</p> required <code>fspDof</code> <code>str, float, or data frame</code> <p>the FSP DOF for mapping flood depth. default is 'MinDtf'. If it's a string, it can be 'MinDtf', 'NumOfFsps', or 'Depression'. If it's a float, it's a constant stage for all the FSPs. If it's a data frame, it's a data frame of FSPs with DOF.</p> <code>'MinDtf'</code> <code>aoiExtent</code> <code>list</code> <p>the extent of the area of interest [minX,maxX,minY,maxY]. default is None.</p> <code>None</code> <p>Returns:</p> Type Description <code>tuple</code> <p>a list of tile IDs, a list of tile FPP extents</p>"},{"location":"model/","title":"model module","text":"<p>The FLDPLN model module. This module implements the FLDPLN singleton class which exposes the MATLAB functions in the fldpln_py package/library created by MATLAB.  In essence, the FLDPLN class hides the conversion from Python variables to MATLAB data types in those functions. </p>"},{"location":"model/#fldpln.model.FLDPLN","title":"<code> FLDPLN        </code>","text":"<p>A singleton class for using the fldpln_py Python package generated in MATLAB.</p>"},{"location":"model/#fldpln.model.FLDPLN.CreateSegmentLibrary","title":"<code>CreateSegmentLibrary(self, bildir, segdir, filmskfile, segshpfile, fldmn, fldmx, dh, mxht, libdir, mtype, para)</code>","text":"<p>Create segment-based FLDPLN library</p> <p>Parameters:</p> Name Type Description Default <code>bildir</code> <code>str</code> <p>BIL file directory</p> required <code>segdir</code> <code>str</code> <p>Segment file directory</p> required <code>filmskfile</code> <code>str</code> <p>Spatial mask BIL file path used to limit the modeling. If no mask, set to ''</p> required <code>segshpfile</code> <code>str</code> <p>A shapefile that contains the segments to be used in the library. If all segments are used, set to ''</p> required <code>segshpfile</code> <code>dict</code> <p>Dictionary containing the shapefile information file (str): Shapefile path that contains the select subset of segments, set to '' if all segments are used segid_field (str): Field name in the shapefile that contains the segment ID seg_fldmx_field (str): Field name in the shapefile that contains the fldmx value. Set to '' if all segments use the same fldmx</p> required <code>fldmn</code> <code>float</code> <p>Minimum flood stage assumed, typically set to 1 centimeter or 0.0328084 foot depends on DEM's vertical unit</p> required <code>fldmx</code> <code>float</code> <p>Maximum stage modeled</p> required <code>dh</code> <code>float</code> <p>Vertical step size in DEM's vertical unit</p> required <code>mxht</code> <code>float</code> <p>max dem+flood height to cease flooding. Usually set 0 for no cap height</p> required <code>libdir</code> <code>str</code> <p>Output directory for the segment-based library</p> required <code>mtype</code> <code>str</code> <p>FLDPLN model type. Choose from {'hd', 'ram0', 'ram'}</p> required <code>para</code> <code>dict</code> <p>Dictionary containing parallelization settings when running the model. type (str): Parallelization type. Choose from {'none', 'parfor', 'parfeval'} numcores (int): Number of cores to use. Set to 0 to use all available cores worker_type (str): Type of workers, 'Processes' or 'Threads'. Default is 'Processes' as MATLAB Runtime does not support 'Threads'</p> required <p>Returns:</p> Type Description <code>None</code> <p>No return value</p>"},{"location":"model/#fldpln.model.FLDPLN.FormatSegmentLibrary","title":"<code>FormatSegmentLibrary(self, bildir, segdir, libdir, dirout)</code>","text":"<p>Reformat segment-based library for tiling and mapping</p> <p>Parameters:</p> Name Type Description Default <code>bildir</code> <code>str</code> <p>BIL file directory</p> required <code>segdir</code> <code>str</code> <p>Segment file directory</p> required <code>libdir</code> <code>str</code> <p>Raw segment-based library directory</p> required <code>dirout</code> <code>str</code> <p>Output directory for the reformatted library</p> required <p>Returns:</p> Type Description <code>None</code> <p>No return value</p>"},{"location":"model/#fldpln.model.FLDPLN.GenerateSegments","title":"<code>GenerateSegments(self, fdrf, facf, strfac, segfac, seglen, segdir)</code>","text":"<p>Generate stream segments for building segment-based FLDPLN library</p> <p>Parameters:</p> Name Type Description Default <code>fdrf</code> <code>str</code> <p>Flow direction BIL file path</p> required <code>facf</code> <code>str</code> <p>Flow accumulation BIL file path</p> required <code>strfac</code> <code>int</code> <p>Stream flow accumulation threshold (in sq. miles) for identifying stream networks</p> required <code>segfac</code> <code>int</code> <p>Stream flow accumulation threshold (in sq. miles) used for creating segments along stream networks</p> required <code>seglen</code> <code>int</code> <p>Segment length threshold (in miles) used for creating segments along stream networks</p> required <code>segdir</code> <code>str</code> <p>Output directory for segment files</p> required <p>Returns:</p> Type Description <code>None</code> <p>No return value</p>"},{"location":"model/#fldpln.model.FLDPLN.GenerateStreamOrder","title":"<code>GenerateStreamOrder(self, bildir, segdir, segshp)</code>","text":"<p>Generate stream order for the segments</p> <p>Parameters:</p> Name Type Description Default <code>bildir</code> <code>str</code> <p>BIL file directory</p> required <code>segdir</code> <code>str</code> <p>Segment file directory</p> required <code>segshp</code> <code>str</code> <p>Selected segment shapefile</p> required <p>Returns:</p> Type Description <code>None</code> <p>No return value</p>"},{"location":"model/#fldpln.model.FLDPLN.WriteSegmentFspCsvFiles","title":"<code>WriteSegmentFspCsvFiles(self, bildir, segdir, seg_list, outdir=None, fileType='csv')</code>","text":"<p>Write segment and FSP as CSV files for viewing or creating segment shapefile</p> <p>Parameters:</p> Name Type Description Default <code>bildir</code> <code>str</code> <p>BIL file directory</p> required <code>segdir</code> <code>str</code> <p>Segment file directory</p> required <code>seg_list</code> <code>list</code> <p>List of integer segment IDs to be exported. If empty, all segments will be exported</p> required <code>outdir</code> <code>str</code> <p>Output directory for the CSV files. If None, the output will be saved in the segment file directory</p> <code>None</code> <code>fileType</code> <code>str</code> <p>FSP output file type. Choose from {'mat', 'csv'}. default is 'csv'</p> <code>'csv'</code> <p>Returns:</p> Type Description <code>None</code> <p>No return value</p>"},{"location":"tile/","title":"tile module","text":"<p>Module to re-organize FLDPLN segment-based library into tile-based library for fast mapping.</p>"},{"location":"tile/#fldpln.tile.CalculateFspSegmentDownstreamDistance","title":"<code>CalculateFspSegmentDownstreamDistance(libFolder)</code>","text":"<p>Cleanup segments (some segments don't exist in FSPs) and save library FSP and segment information as two csv files (fsp_info.csv &amp; segment_info.csv).  It reads in the SpatialReference.prj and save it in CellSizeSpatialReference.json. For stage interpolation, it also calculates FSP and segment  downstream distance (i.e., distance to library outlet(s)) which involves:</p> <pre><code>1. Calculate FSP's within-segment downstream distance\n2. Calculate segment length which is more accurate than \"CellCount\" * cell size\n3. Calculate segment's downstream distance (to watershed outlet) for speeding up \n4. Calculate FSP's downstream distance\n</code></pre> <p>Note that FSPs and segments are based on raster cell centers. Segment and its downstream segment has a gap (1 cell or sqrt(2) cell).</p> <p>Parameters:</p> Name Type Description Default <code>libFolder</code> <code>str</code> <p>folder containing the tiled library.</p> required <p>Returns:</p> Type Description <code>tuple</code> <p>FSP data frame. segment data frame.</p>"},{"location":"tile/#fldpln.tile.CalculateLibraryExtent","title":"<code>CalculateLibraryExtent(segLibFolder, cellSize)</code>","text":"<p>Calculate library external border extent. Also calculate segment extents (FPP cell center) and save them in a data frame.</p> <p>Parameters:</p> Name Type Description Default <code>segLibFolder</code> <code>str</code> <p>folder containing the segment-based library.</p> required <code>cellSize</code> <code>float</code> <p>cell size in meters.</p> required <p>Returns:</p> Type Description <code>tuple</code> <p>external border extent (minX, maxX,minY, maxY), data frame of segment extent of ['MinX','MaxX','MinY','MaxY','FileName'] defined by FPP cell center.</p>"},{"location":"tile/#fldpln.tile.CalculateTileBoundary","title":"<code>CalculateTileBoundary(minX, maxX, minY, maxY, tileSizeX, tileSizeY, padding=True)</code>","text":"<p>Calculate each tile's boundary as (minX, maxX,minY, maxY).</p> <p>Parameters:</p> Name Type Description Default <code>minX</code> <code>float</code> <p>min x of the external border (not the cell center) coordinates of the area needs to be tiled.</p> required <code>maxX</code> <code>float</code> <p>max x of the external border (not the cell center) coordinates of the area needs to be tiled.</p> required <code>minY</code> <code>float</code> <p>min y of the external border (not the cell center) coordinates of the area needs to be tiled.</p> required <code>maxY</code> <code>float</code> <p>max y of the external border (not the cell center) coordinates of the area needs to be tiled.</p> required <code>tileSizeX</code> <code>float</code> <p>tile external border size (not the cell center size) in x axis.</p> required <code>tileSizeY</code> <code>float</code> <p>tile external border size (not the cell center size) in y axis.</p> required <code>padding</code> <code>bool</code> <p>whether the tiles have the same size and not reduced to the border of the tiled area. Default is True.</p> <code>True</code> <p>Returns:</p> Type Description <code>list</code> <p>list of tile boundaries of (minX, maxX,minY, maxY)</p>"},{"location":"tile/#fldpln.tile.GenerateSegmentShapefilesFromFspSegmentInfoFiles","title":"<code>GenerateSegmentShapefilesFromFspSegmentInfoFiles(segInfoFile, fspInfoFile, crs, outShpFile)</code>","text":"<p>Generate segment shapefiles from FSP and segment info files.</p> <p>Parameters:</p> Name Type Description Default <code>segInfoFile</code> <code>str</code> <p>segment info file.</p> required <code>fspInfoFile</code> <code>str</code> <p>FSP info file.</p> required <code>crs</code> <code>str</code> <p>coordinate reference system.</p> required <code>outShpFile</code> <code>str</code> <p>output shapefile.</p> required"},{"location":"tile/#fldpln.tile.GetStreamOrdersForFspsSegments","title":"<code>GetStreamOrdersForFspsSegments(libFolder, strOrdShpFile, shpSegIdName, shpStrOrdColName)</code>","text":"<p>Get stream order for FSPs and segments from segment stream order shapefile and save them in fsp_info.csv and segment_info.csv files.  It also creates file stream_order_info.csv which stores the network info at the level of stream orders for FSP DOF interpolation.</p> <p>Parameters:</p> Name Type Description Default <code>libFolder</code> <code>str</code> <p>library folder.</p> required <code>strOrdShpFile</code> <code>str</code> <p>stream order shapefile.</p> required <code>shpSegIdName</code> <code>str</code> <p>segment ID column name in the shapefile.</p> required <code>shpStrOrdColName</code> <code>str</code> <p>stream order column name in the shapefile.</p> required <p>Returns:</p> Type Description <code>tuple</code> <p>FSP data frame, segment data frame, stream order network data frame.</p>"},{"location":"tile/#fldpln.tile.ReadMatFile","title":"<code>ReadMatFile(matFile, varName)</code>","text":"<p>Read matlab files with different versions. scipy.io DOES NOT support MATLAB files version 7.3 yet! Some of the libraries are in 7.3 while the others are not.</p> <p>Parameters:</p> Name Type Description Default <code>matFile</code> <code>str</code> <p>matlab file name.</p> required <code>varName</code> <code>str</code> <p>variable name in the matlab file.</p> required <p>Returns:</p> Type Description <code>data frame</code> <p>variable matrix in the matlab file.</p>"},{"location":"tile/#fldpln.tile.TileLibrary","title":"<code>TileLibrary(segLibFolder, cellSize, tiledLibFolder, tileSize, fileFormat)</code>","text":"<p>Tile a library. Turn segment-based FSP-FPP relations to tile-based. Note that 'snappy' format needs to install the 'fastparquet' python package</p> <p>Parameters:</p> Name Type Description Default <code>segLibFolder</code> <code>str</code> <p>folder containing the segment-based library.</p> required <code>cellSize</code> <code>float</code> <p>cell size in meters.</p> required <code>tiledLibFolder</code> <code>str</code> <p>folder for the tiled library.</p> required <code>tileSize</code> <code>int</code> <p>number of cells in a tile.</p> required <code>fileFormat</code> <code>str</code> <p>'snappy' or 'mat'.</p> required <p>Returns:</p> Type Description <code>dict</code> <p>metadata of the tiled library</p>"},{"location":"usage/","title":"Usage","text":"<p>To use fldpln in a project:</p> <pre><code>import fldpln\n</code></pre>"},{"location":"examples/intro/","title":"Intro","text":"In\u00a0[1]: Copied! <pre>print('Hello World!')\n</pre> print('Hello World!') <pre>Hello World!\n</pre>"}]}